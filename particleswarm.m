%% 
% ==============================================
% Population diversity measurement and
% Exploration and exploitation measurement in population-based
% metaheuristic algorithms
% =============================================
% Author and Programmer: Kashif Hussain, usitsoft@hotmail.com
% Cite As:
% \bibitem{kHussainNCAA} Kashif Hussain, Mohd Najib Mohd Salleh, Shi Cheng,
% and Yuhui Shi, ``On the exploration and exploitation in popular
% swarm-based metaheuristic algorithms,'' \emph{Neural Computing and
% Applications}, pp. 1--19, July. 2018. DOI: https://doi.org/10.1007/s00521-018-3592-0
%%
function [retval, fval, param,totalEval] = particleswarm(tPart,maxItr,ub,lb,dim,CostFunction)

    totalEval = 0;
    allPart=[];
    gbestval = 1.0e+100;
    ub = ub * ones(tPart,dim);
    lb = lb * ones(tPart,dim);
    minIWeight = 0.4;
    maxIWeight = 0.9;
    c1 = 2; %1.6319;
    c2 = 2; %0.6239;
    w = 0.9; %0.6571;
    vCFactor = 2;
    pBestVal(:,1) = zeros(tPart,1);
    pBestVal(:,2) = 1.0e+100*ones(tPart,1);    
    p = initSwarm(tPart, lb(1,:), ub(1,:), dim);
    v = initVel(tPart, dim, vCFactor, ub(1,:));
    ii = 1;
    while (ii <= maxItr)
        for i=1:tPart
            pBestVal(i,1) = i;
            fval = CostFunction(p(i,:)); % Test function
            if isnan(fval)
                fval = inf;
            end            
            totalEval = totalEval + 1;
            if fval<=pBestVal(i,2),
                pBest(i,:) = p(i,:);
                pBestVal(i,2) = fval;
            end
            if fval<=gbestval,
                gbest = p(i,:);
                gbestval=fval;
            end
        end
        
        % Normalize particle position values
        pTemp=p;
        pTemp2=p;
        for j=1:dim
            for i=1:tPart
                pTemp2(i,j)=pTemp(i,j)+abs(min(pTemp(:,j)));
            end      
            if max(pTemp2(:,j))>0
                pTemp2(:,j)=pTemp2(:,j)/max(pTemp2(:,j));          
            else
                pTemp2(:,j)=0;
            end
        end

        for i=1:tPart
            % Population diversity of swarm individuals
            med=0;
            for j=1:dim
                med= med + abs(median(pTemp2(:,j))-pTemp2(i,j));
            end
            allPart(ii,i)=med/dim;
        end        
        
        % Population diversity as a whole
        temp=[];
        for j=1:dim
            temp(j)=mean(abs(pTemp2(:,j)-mean(pTemp2(:,j))));           
        end
        Div(ii)= sum(temp)/tPart;
        
        gbestColl(ii) = gbestval;
        w = (maxIWeight - minIWeight)*((maxItr - ii)/maxItr) + minIWeight;
        v = psoVel(tPart, dim, v, gbest, pBest, p, w, c1, c2, vCFactor, ub);
        p = psoUpd(p,v,lb,ub);        
        showX = ['Iteration: ', num2str(ii),', fval: ',num2str(gbestval)];
        disp(showX)
        ii = ii + 1;
    end
    retval = gbestColl;
    param = gbest;
    fval = gbestval;

    showX = ['Total Function Evaluations: ', num2str(totalEval)];
    disp(showX)    
    
    Xpl = sum((Div/max(Div))*100);
    Xpt =sum((abs((Div-max(Div)))/max(Div))*100);
    showX = ['Exploration: ', num2str(Xpl), ', Exploitation: ', num2str(Xpt)];
    disp(showX)    
    
    figure
    plot([1:maxItr],Div)
    xlabel('Iterations', 'FontSize', 14)
    ylabel('Diversity Measurement', 'FontSize', 14)
    title('PSO', 'FontSize', 14)   
    set(gca,'FontSize',14);
    
    figure
    plot([1:maxItr],((Div/max(Div))*100),[1:maxItr],((abs((Div-max(Div)))/max(Div))*100))
    xlabel('Iterations', 'FontSize', 14)
    ylabel('Percentage', 'FontSize', 14)
    title('PSO', 'FontSize', 14)
    legend('Exploration %','Exploitation %','Location','best') 
    set(gca,'FontSize',14);      
    
end

function [vel] = initVel(totPart, ndim, vCFactor, ub)
    vMax = ub*vCFactor;
    vMin = -vMax;
    for i=1:totPart
        vel(i,:)=vMin+(vMax-vMin).*rand(1,ndim);
    end
end

function [guess]=initSwarm(n,lb,ub,ndim)
    for i=1:n,
        guess(i,1:ndim)=lb+rand(1,ndim).*(ub-lb);
    end
end

function [guess]=initPart(lb,ub, ndim)
    guess=lb+rand(1,ndim).*(ub-lb);
end

function v = psoVel(tPart, ndim, vel,gbest,pbest,p,w, c1, c2, vCFactor, ub)
    vMax = ub*vCFactor;
    vMin = -vMax;
    for i = 1:tPart,
        v(i,:) = w*vel(i,:) + c2*rand(1,ndim).*(gbest-p(i,:)) + c1*rand(1,ndim).*(pbest(i,:)-p(i,:));                        
    end
    v = findrange(v,vMin,vMax);
end

function p = psoUpd(best,vel,lb,ub)
    tPar = size(best,1);
    for i = 1:tPar,
        p(i,:) = best(i,:) + vel(i,:);
    end
    p = findrange(p,lb,ub);
end